/*
字符串匹配问题是很经典的动态规划问题，可将问题分解为多个子问题。
本题是正则表达式的匹配，含有 . * 等符号。在学习了思路后自己总结实现了出来（看懂也废了好大力气，，，）。
https://leetcode-cn.com/problems/regular-expression-matching/solution/dong-tai-gui-hua-zen-yao-cong-0kai-shi-si-kao-da-b/（大神链接）

用dp[i][j]表示字符串s1的前i位和表达式s2的前j位的匹配情况，可分为以下几种情形：dp[i][j]=
1 两字符串当前均为普通字符且相等，则当前状态取决于前一个字符的匹配状态
  dp[i-1][j-1].
2 s2[j]字符为“.”,可匹配任意普通字符，则状态转移同1
  dp[i-1][j-1].
3 s2[j]字符为“*”,则必须考虑s2[j-1]：
  3.1 若s2[j-1]！=s1[i]，则当前状态取决于s2[j-2]和s1[i]的状态
	dp[i][j-2].
  3.2 反之，若s2[j-1]==s1[i] 或s2[j-1]字符为“.”则需进一步考虑前面字符的状态。以下三个状态满足一个即可完成匹配：
	3.2.1 dp[i-1][j] (ab*看作多个b组成的串,匹配abbbbbb)
	3.2.2 dp[i][j-1] (ab*看作ab，匹配ab)
	3.3.3 dp[i][j-2] (ab*看作a，匹配a)
*/

#include<iostream>
#include<string>
#include<vector>
using namespace std;

int main() {
	string s1 = "aab", s2 = "c*a*b";
	s1 = " " + s1; s2 = " " + s2;
	int n = s1.size(), m = s2.size();
	vector<vector<int>>dp(n + 1, vector<int>(m + 1));
	dp[0][0] = 1;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			if (s1[i] == s2[j] || s2[j] == '.')
				dp[i][j] = dp[i - 1][j - 1];    //分支 1 2
			else if (s2[j] == '*') {
				if (j >= 2 && s2[j - 1] != s1[i])
					dp[i][j] = dp[i][j - 2];    //分支3.1
				else if (s2[j - 1] == s1[i] || s2[j - 1] == '.') {
					dp[i][j] = dp[i - 1][j] ||    //分支3.2.1
						dp[i][j - 1] ||			        //分支3.2.2
						dp[i][j - 2];			          //分支3.2.3
				}
			}
		}
	}
	cout << dp[n][m];
	return 0;
}
