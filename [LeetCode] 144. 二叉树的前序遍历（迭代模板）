/*
给定一个二叉树，返回它的 前序 遍历。

 示例:

输入: [1,null,2,3]  
   1
    \
     2
    /
   3 

输出: [1,2,3]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-preorder-traversal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 /*
思路：
递归的本质就是用栈存储遍历时的路径，回溯时弹出即可访问之前的元素。
因此使用栈进行迭代可以模拟递归调用。在学习别人思路的基础上总结出一份模板代码。
 */
 
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>ans; //保存得到的序列
        stack<TreeNode*>s;
        if(root!=NULL)s.push(root);
        while(!s.empty()){
        TreeNode* t = s.top();
        s.pop();
        if(t==NULL){
            //遍历先序，则入栈顺序要反过来：右-左-根
            if(t->right)s.push(t->right);
            if(t->left)s.push(t->left);
            s.push(t);
            s.push(NULL);//在当前节点之前加入一个空节点表示已经访问过了
            /*
             *若是中序遍历，则入栈顺序为：右-根-左
             *if(t->right)s.push(t->right);
             *s.push(t);
             *s.push(NULL):
             *if(t->left)s.push(t->left);
             */
            /*
             *若是后序遍历，则入栈顺序为：根-右-左
             *s.push(t);
             *s.push(NULL):
             *if(t->right)s.push(t->right);
             *if(t->left)s.push(t->left);
             */
        }
        else{
            //弹出NULL之前压栈的一个节点，也就是上面call.push(t)中的那个t
            ans.push_back(s.top()->val);
            s.pop();
        }
        return ams;
    }
