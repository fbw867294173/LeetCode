/*
容器的容积和两个柱子中较短的那根和底的长度有关，只能想到O(n^2)的遍历思路，暴力肯定会超时。
双指针的思路是维持左右两个指针代表两个高度的柱子。每次将高度较短的那根柱子向中间靠。
验证：
  初始情况，假设两根柱子的高度是x,y 且x<=y，中间底的长度为l。那么容积v = min(x,y)*l = x*l;
那么左移右侧的柱子即使y增大，v的体积也会被x限制，且随着l的减小而减小。所以移动更短的那根柱子
尝试是否有更高的柱子就形成了思路。
*/

class Solution {
public:
	int maxArea(vector<int>& height) {
		int l = 0, r = height.size() - 1;
		int ans = INT_MIN;
		while (l < r) {
			ans = max(ans, min(height[l], height[r])*(r - l));  //计算体积
			if (height[r] > height[l])                         //尝试右移左柱子
				l++;
			else                                            //尝试左移右柱子
				r--;
		}
		return ans;
	}
};
